{"callers":["void log_system_info() {\n    // 记录系统信息到日志\n    time_t now = time(NULL);\n    struct tm *local_time = localtime(\u0026now);\n    char time_str[100];\n    strftime(time_str, sizeof(time_str), \"%Y-%m-%d %H:%M:%S\", local_time);\n    \n    char system_info[256];\n    sprintf(system_info, \"系统信息记录时间: %s\", time_str);\n    print_log(system_info);\n}","void validate_input(const char *input) {\n    // 验证输入是否有效\n    if (input == NULL || strlen(input) == 0) {\n        print_log(\"错误: 输入为空\");\n        exit(1);\n    }\n    \n    // 检查特殊字符\n    for (int i = 0; i \u003c strlen(input); i++) {\n        if (input[i] == ';' || input[i] == '|' || input[i] == '\u0026') {\n            print_log(\"警告: 输入包含特殊字符\");\n            break;\n        }\n    }\n}","void process_password(const char *password) {\n    // 处理密码逻辑\n    printf(\"处理密码...\\n\");\n    \n    // 检查密码强度\n    int has_upper = 0, has_lower = 0, has_digit = 0, has_special = 0;\n    for (int i = 0; i \u003c strlen(password); i++) {\n        if (isupper(password[i])) has_upper = 1;\n        else if (islower(password[i])) has_lower = 1;\n        else if (isdigit(password[i])) has_digit = 1;\n        else has_special = 1;\n    }\n    \n    int strength = has_upper + has_lower + has_digit + has_special;\n    char strength_str[50];\n    switch (strength) {\n        case 1:\n            sprintf(strength_str, \"密码强度: 弱\");\n            break;\n        case 2:\n            sprintf(strength_str, \"密码强度: 中\");\n            break;\n        case 3:\n            sprintf(strength_str, \"密码强度: 强\");\n            break;\n        case 4:\n            sprintf(strength_str, \"密码强度: 非常强\");\n            break;\n        default:\n            sprintf(strength_str, \"密码强度: 未知\");\n    }\n    print_log(strength_str);\n    \n    // 计算校验和\n    int checksum = calculate_checksum(password);\n    char checksum_str[50];\n    sprintf(checksum_str, \"密码校验和: %d\", checksum);\n    print_log(checksum_str);\n    \n    // 特殊情况处理\n    handle_special_case(strength \u003e= 3);\n    \n    // 最终记录密码\n    char log_message[200];\n    sprintf(log_message, \"记录密码: %s\", password);\n    print_log(log_message);\n}","void perform_extra_operations(int value) {\n    // 执行额外操作\n    printf(\"执行额外操作，值: %d\\n\", value);\n    \n    // 模拟复杂计算\n    int result = value * 3 + 7;\n    if (result % 2 == 0) {\n        result /= 2;\n    } else {\n        result = (result + 1) / 2;\n    }\n    \n    char operation_log[100];\n    sprintf(operation_log, \"额外操作结果: %d\", result);\n    print_log(operation_log);\n}","void generate_report() {\n    // 生成报告\n    printf(\"生成报告...\\n\");\n    \n    // 模拟报告生成过程\n    for (int i = 0; i \u003c 10; i++) {\n        perform_extra_operations(i * 5);\n    }\n    \n    char report_message[100];\n    sprintf(report_message, \"报告生成完成\");\n    print_log(report_message);\n}","void cleanup_resources() {\n    // 清理资源\n    printf(\"清理资源...\\n\");\n    \n    // 模拟资源清理过程\n    for (int i = 0; i \u003c 3; i++) {\n        perform_extra_operations(i + 100);\n    }\n    \n    char cleanup_message[100];\n    sprintf(cleanup_message, \"资源清理完成\");\n    print_log(cleanup_message);\n}"]}
